* 2017/02
** 2017/02/03
*** 写组件关键在于抽象，将真正不变的部分抽象成为固定代码，同时提供灵活的可配置项让用户可以根据实际需求去定制，要注意取其神而去其形。其实不止是写组件，不管是任何编程都是这样的，最关键的问题在于问题分解与抽象，有一个主干————整体流程，然后是附加功能tip。保证整体流程不变的情况下通过拓展来完成需求。
*** 修改数据而不是返回新数据最大的问题在于跨环境拆分问题，由于数据只有一份，而环境会有多份，由于每一个环境都引用了这一份数据，导致这个环境无法被独立出来，无法拆分，随着后期维护的进行，这个环境就会越来越复杂，系统就渐渐的变得不可维护了。
*** 接口是什么？接口实际上是类型抽象，
** 2017/02/04
*** 使用对象封装VS使用函数封装。使用
*** 使用消息VS使用函数。使用消息实际上相当于多了一遍抽象，它使得生产者与消费者能够解耦，我们并不需要关注于调用哪个函数，只需要告诉外部可以调用函数了，至于调用哪个函数，我们并不需要关心。
*** 重复无处不在，抽象也无处不在。比如如果你看到一个函数经常被调用，使得它的调用关系非常复杂，例如：
	fna(){
	    ...
		fnt();
	}

	...

	fnb(){
	    ...
		fnt();
	}

	...

	fnc(){
	   fnt();
	   ...
	}
	可以看到，好多地方在调用fnt，那么可以考虑将对fnt的调用换成一个事件发送，然后再添加事件处理调用fnt，
*** angular实际上从整体上看就是一个DI(依赖注入)框架。什么是依赖注入呢？依赖注入就是通过函数参数来传入依赖并使用的方法。这种方式有个巨大的好处就是便于测试，我们只需要写一个与真实接口差不多的测试类，就可以实现依赖替换，进而测试我们真正关心的模块了。
** 2017/02/06
*** readonly与disabled的区别：
	1. readonly只对表单的文本输入框有效，包括单行文本(text)、密码框(password)与多行文本(textarea)有效。而disabled对所有的表单控件都有效。典型的，比如单选框(radio)、复选框(checkbox),使用disabled是有效的，但是使用readonly就不行了。
	2.
*** 通过同步调用增加callback，通过异步调用减小num，当num等于0的时候就一个个的调用处理结果。
*** 只要右键菜单中有一个请求没有返回数据，那么右键菜单就不会出来。
*** 如果数据可变，调试起来也会非常麻烦，因为你并不知道数据是在什么时候改变的，而且一旦改变了，你再想看到原来的数据就不可能了。
*** 基本数据类型在函数中传递时是不可变的，但是复杂数据类型（也叫引用数据类型），在传递的过程中是可变的。
*** TIPS 最简单的发送http请求的方法————使用fetch，这样我们可以轻松的绕过jquery并使用Promise，代码的可组合性非常好。
*** TODO 有了Promise以后，我们处理异步代码的方式好了很多，但这依然不够，为什么我们不能像写同步代码一样来写异步呢？为什么我们需要不停的then，这实际上也是一种重复，可以被继续优化。我们的解决方案是async/await。将函数声明为async的，然后在异步函数（返回Promise的函数）前加个await等待函数的执行结果，我们就不再需要使用then来等待处理结果了，当函数返回以后，函数就会继续往下执行。
*** DONE ES6的import/export相比于define/require有什么好处呢？仅仅是靠“import/export是标准规定的”这个理由显然是站不住脚的，标准为什么要这么规定呢？一个显著的好处是使用import/export我们能够非常方便的控制导出与引入哪一个函数亦或是所有函数，控制导入的函数的新名称与位置，这种灵活性虽然使用define/require也能做得到，但没有import/export能够做的这么简洁清晰，可读性好。
** 2017/02/07
*** 什么是数据绑定呢？数据绑定实际上就是数据联动，一旦一个数据发生变化，另一个数据也要跟着变化，这就是数据绑定。实现数据绑定的方式常见的有以下几种：
	1. 使用事件监听，这一方式常用来实现UI数据到模型数据的绑定。
	2. 使用getter/setter，这一方式常用来实现一个数据到另一个数据的绑定或是数据到UI的绑定。
*** TODO 将html渲染、事件监听与事件处理这三个步骤给抽象出来实现组件。
*** 实现当在列表项按下F8时依然插入
*** UI学会把图标丢到iconfont能够大大方便研发使用图标，这样就省去了研发手动打包图片这个枯燥的过程，非常有用。
*** angularjs的module与module之间不能有嵌套关系，使用bootstrap方法启动时一个module关联一个dom元素，这些dom元素之间也不能有嵌套关系。也就是说，一个module对应一个dom元素，module与module之间没有交集，使用bootstrap方法可以启动module，也可以使用ng-app方法来启动。controller与controller之间可以嵌套，子controller可以直接使用父contrller的成员。需要注意的是，必须使用module的controller方法注册子controller才会开启子controller的转义，不然是没有效果的。
*** TODO webpack vs gulp.横向拆分vs纵向拆分
*** angular中，factory/service/provider实际上是差不多的东西，它们都是服务，都可以被controller以一样的方式引入，引入的时候就是对象，无需自己再new。它们最大的差别是返回值，factory返回一个对象，service返回this，provider返回$get方法return的东西。
** 2017/02/08
*** IMPORTANT 实际上ng-controller,ng-model,ng-bind,还有{{}}这些都是angular的一些指令，它们拓展了html，用来在当页面渲染完毕以后对页面进行求值（主要是一些替换），将页面后处理成最终的html。通过这种后处理，我们的html获得了动态的能力。更为强大的是，angualrjs还允许我们自定义指令，用来定义我们自己的替换规则，这进一步提升了这种替换能力，使得我们只需要关注于替换规则，不需要自己遍历dom树就可以实现html拓展了。
*** TIPS CSS3的currentColor代表当前元素的文本颜色，使用它可以实现当修改元素的文字颜色时，联动修改边框色、背景色、阴影色，实现颜色的联动控制，这样，我们就再也不用使用额外的元素来模拟了。
*** 使用纯css来生成三角标的要诀是宽高设为0，然后将需要显示的一边设置颜色，然后将不显示的标设成透明，这样我们就可以任意构建我们需要的三角形了。
** 2017/02/09
*** TIPS css的background-image是不能超出content范围的，如果真要超出范围，就要使用before/after伪元素了。
*** TIPS before/after伪元素能够在不增加dom节点的情况下实现dom元素的修改，非常好用。
*** 最好的使用前端组件的方式是使用js，我们只需要一个函数调用就可以在页面中添加一个组件。
** 2017/02/11
*** IMPORTANT 对重要的函数进行封装，提供前钩子与后钩子，这样我们就可以在函数调用前或调用后进行一些操作，比如纪录日志，处理错误等，这是一种非常有效且常用的封装手段。例如：
	function add(a,b){
    return a+b;
	}
	
	function wrapper(fn) {
    return function (...args) {
    let ret = fn(...args);
    console.log("function be called,result is " + ret);
    return ret;
    }
	}
	
	add(10,20);
	
	let newAdd = wrapper(add);
	
	newAdd(10,20); //function be called,result is 30
	
	newAdd(111,222,333);  //function be called,result is 333
	这段代码就对add进行了封装，并且在封装之后的函数代替了之前的函数，这样新函数在每次调用的时候就会顺带在控制台打印出结果了。我们可以继续抽象wrapper，使得它可以用来包装所有函数，如下：
	function wrapper2(fn,preFn,postFn) {
    return function (...args) {
    preFn(...args);
    let ret = fn(...args);
    postFn(ret);
    }
	}
	
	let newAdd2 = wrapper2(add,
    (...args) => console.log("function will be called,args is " + args),
    ret => console.log("function be called,result is " + ret));
	
	newAdd2(11,22);  //function will be called,args is 11,22  function be called,result is 33
	newAdd2(111,222,3333);  //unction will be called,args is 111,222,3333  function be called,result is 333
	通过这种方式，我们就实现了函数钩子，非常好用。我们还可以把wrapper函数直接放在函数参数上，当我们想记录的时候记录函数调用，比如
	function middlewareAdd(a,b,middleware) {
        if(middleware){
            let fn = middlewareAdd;
            let newFn = middleware(fn);
            return newFn(a,b);
        }
        return a+b;
    }

    function middleware(fn) {
        return function (...args) {
            let ret = fn(...args);
            console.log("function be called,result is " + ret);
            return ret;
        }
    }

    middlewareAdd(10,66,middleware);
	实际上，redux的中间件middleware就是这么实现的。
*** 实际上，js进行函数调用时会隐式的将所有参数绑定到arguments对象，rest arguments的出现使得这一绑定过程变得显式了。通过这个绑定，我们能够获取函数被调用时的所有参数，不管参数有几个，这就使得我们能够以一个回调参数获取到所有的函数被调用时的所有参数，我们可以原封不动的传递整个函数调用到另一个函数中，对原函数进行一些修改，极大的增强了js的表现力。
*** TIPS 记住，css的div的overflow的默认值是visible，也就是说，如果你设置了外框的宽高，设置了内框的宽高，如果元素发生了溢出，默认情况下，css是会显示的，这就是很多时候我们看到外框无法盖住内框，然后溢出的元素压到了下面元素的原因。
*** TIPS 留意css元素间的空格字符，它经常会导致样式错乱，解决的方法有很多种：
	1. 将父元素的font-size设置为0，然后子元素设置回要求的字号，这样每增加一个元素又要重新设置，不是很好的解法。
	2. 设置负margin，将元素往回移动一点距离，这个解法只需在换行的元素上往回偏移几个像素就行了，是非常好的解法。
	3. 浮动会改变父级元素的布局，要格外注意。
** 2017/02/13
*** 事件系统最大的问题在于它打断了原本清晰的执行流。罪魁祸首是使用数组以及查表。
*** 使用建文件夹作为代码的基本组织形式，而不是用建文件。
*** TODO 要想东西好用，需要很多共用的约定，用户都按照这些约定去做，整个系统就会变得非常简单。
*** IMPORTANT 模块加载器实际上就是一个单例，一旦生成出来就可以直接给以后复用了。实际上单例模式是缓存机制的最朴素实现了。
*** angular中，controller最好就是最为一个对外的接口就行，至于对内的实现什么的应该移到其他的地方来做。
*** rest arguments非常重要，它能在你并不知道函数签名的情况下对函数进行二次抽象。
** 2017/02/14
*** 操作系统就是一个公共层，它应该解决单个应用无法解决的痛点，比如文件索引、视觉、程序管理等问题。
*** TIPS 觉得某一块的代码在某个地方的代码太多，多数情况下是因为抽象还不够，肯定可以通过继续抽象减少代码量，减小代码的侵入程度。
** 2017/02/17
*** 正则表达式的意义到底在哪呢？它实际上是对字符的更精确划分，比如数字、字母、空格等等。传统的字符仅仅是一个编码，但我们需要根据这个编码的内容对符合某些要求的字符串进行处理，这就是正则表达式发明的背景。第一个想到使用正则来处理字符串的人真是天才，它能大大节省处理字符串的工作量。
** 2017/02/20
*** css其实是比较乱的，所以需要我们写css的时候按照一定的规则来写，有两种惯用的css写法，一种是由里边写到外边，一种是由外边写到里边。比如一个div，由里边写到外边的写法是先写font，然后是paddin，然后是border、margin，这样一个div样式就写完了；由里边写到外边的写法是width、height、margin、border，然后是line-height、text-align来水平垂直对齐，然后是font。由外写到里可以使得文字大小可调且整体样式不变，是比由内写到外更好的方式。
*** TIPS 正则表达式尽管非常复杂，有着繁多的符号，但其实它有基础语法，掌握了基础语法，其他的就都很容易了，基础语法：
	"^([]{})([]{})([]{})$"
	"正则字符串 = "开始（[包含内容]{长度}）（[包含内容]{长度}）（[包含内容]{长度}）结束"
*** 正则其实就这些内容：
	1. 三个括号，小括号(分组)、中括号(或者)、大括号(重复)。
	2. 海量的字符组(\r\n\w\t\s\v\num\xn)，可以用中括号来表示。
	3. 几个等价字符，可以用大括号来表示。？等价于{0,1},*等价于{0,},+等价于{1,}。
*** 正则表达式存在前缀以及后缀的概念，比如
	1. 前缀：[^pattern]，(?:pattern)
	2. 后缀：[pattern]{repeat}
	只是这一概念比较少被提及。
*** 要注意正则表达式的^，这个字符用在中括号外面表示匹配行开始，用在中括号里面表示非。
*** TODO 使用正则如何匹配icon-xxx后面的xxx(xxx中可能还有-)?
*** 实际上web前端常用的输入控件就两种，文本框（包括单行文本框与多行文本框）与下拉框（包括下拉单选框、下拉多选框）。只需要这两个控件就能搞定绝大多数的输入问题，bootstrap自带的下拉框功能比较弱，可以通过bootstrap-select或是select2插件来弥补。
*** jQuery 插件为 Bootstrap 的组件赋予了“生命”。可以简单地一次性引入所有插件，或者逐个引入到你的页面中。————Bootstrap 《Javascript 插件》
	这句话非常简明扼要的描述了jquery插件的实现原理，其实bootstrap最好是不需要js的，但是不适用js无法为插件赋予"生命"，所谓的"生命"实际上就是事件处理，仅仅依靠css是无法实现事件处理的，无法监听与响应用户的行为，这就是js之于css的意义，也是它对于html的意义。
*** TODO 编程过程中如何处理复杂的if...else...?
	1. OOP。使用别人的数据结构构建自己的数据结构对象，然后调用不同对象里面的同名契约方法，实现同样的接口，不同的行为。
	2. 查表。
*** TIPS html的强大其实很多人都不会用，它真正的强大之处在于定制标签与属性实现功能特性。
** 2017/02/21
*** IMPORTANT 开闭原则————当拓展功能的时候，如果我们需要根据数据修改父类，那么更好的方法就是将数据给抛出来给子类，然后在子类中判断数据，修改数据。
*** npm与webpack实际上是两个东西，webpack可以通过npm安装与使用，但并不意味着这是必须的，是强耦合的，我们完全可以将npm与requirejs配合使用。
** 2017/02/22
*** TIPS 将data与view分开管理，各自放在各自的集合中，然后通过view修改data，返回新的data去更新data。
*** 前端理想的代码结构是怎样的呢？有一个公共的模块中心来配置加载哪些子模块，子模块之间没有相互依赖，每个模块处理一部分数据，当数据处理完毕时返回新的数据去更新老数据。
*** 原始数据与关联数据，发展的初期更多的是原始数据，关联数据比较少，但随着系统的演化应该尽可能的将原始数据改为关联数据，这样只要改变很少的原始数据，关联数据就能跟着变化了。
*** IMPORTANT mixin，非常强大的一种抽象手段，如果你觉得一个对象的方法太多，想对这些方法进行分类，但这些方法是平行的，你不想把这些方法拆分到多个不同的对象中，这时就可以使用mixin，将这些方法打散到不同的对象中，然后在需要的时候把这些方法mixin在一起。
** 2017/02/23
*** IMPORTANT 如何传入配置？有很多种方法，如下：
	1. 在构造的时候传入一个复杂的配置对象，传入自定义的属性。这是最传统的思路，缺点是配置复杂之后结构复杂，灵活性比较差。
	2. 通过继承，重写需要自定义的方法，这种方法比方法一好了点，但依然不够灵活。
	3. 通过函数调用，通过函数传入配置，这种就比方法二更好了些，能够自定义流程了。
*** 抽象样式还是抽象标签？关于这个问题，bootstrap使用的是抽象样式，react使用的是抽象标签，angular使用的是混合式。抽象样式容易使人忘记使用，抽象标签更加优秀，混合式过于复杂。
*** IMPORTANT 给外部提供统一的数据接口提供数据，一个模块始终保证只引用一个文件，保持依赖的清晰。
*** TIPS 将经常修改的变量抽象成为函数可以给我们一个一起处理变量值变化的机会。
*** 尽量将类似的操作放到一个函数中去处理，这样函数比较少，比较容易管理。如果一个操作一个函数，那么管理起来就很费劲了。
*** TIPS requirejs是如何实现配置的呢？实际上就是载入一个js文件，一般叫做require-config，通过运行这个配置文件，就达到了配置的目的。不止requirejs，webpack/gulp/grunt实际上都是这么干的。在以前配置就是数据，但现在，渐渐的，代码就是配置。
*** TIPS 关于事件冒泡，当一个事件发生时，这个事件会从里到外逐级的往上传递，最终到这个节点的所有父节点，只要不使用stopPropgration阻断传播，这个事件就会一直传递，在任意一级添加事件监听都能进行事件处理，所以，我们实际上可以在一个组件的最外层统一处理所有某个类型的事件。
*** IMPORTANT 实际上事件机制整体就是一个遍历，只不过不是全遍历，每当一个事件发生的时候，事件机制会在所有的可能对象间一一匹配，如果有合适的回调，这个函数就会被调用，通过一个统一的事件中心，解耦了系统的各个部分，就这么简单。
*** TIPS js的super是什么？super就是父级对象的同名函数。
** 2017/02/24
*** TODO webpack实际上就是定义了一个require函数，然后分析依赖关系，将一个文件依赖的所有文件给放到一起，那么问题来了，如何分析依赖关系？
*** IMPORTANT 关于程序中数据的定义————数据应该尽可能的精炼，尽可能的减少数据，把尽可能多的数据做成关联数据，而不是基础数据，这样一旦基础数据发生了改变，关联数据就能同步更新了，维护起来就会非常容易。
*** TIPS 数组去重————Array.from(new Set(typeName))这也许是最简单的数组去重方法了。
** 2017/02/25
*** TODO 闭包能够为函数建立起一个求值环境，使用闭包封装函数能够使函数在保持函数功能的同时又有自己的状态，实现状态保持。
** 2017/02/27
*** 事件的执行顺序，不同的组件有不同的顺序，比如：
	1. 对于单选框radio/复选框checkbox，先后顺序是mousedown --> mouseup --> click --> change。
	2. 对于下拉框select,当点击下拉的某一项时，如果有改变，事件顺序是change --> mouseup --> click，如果无改变，事件顺序是mouseup --> click。mousedown事件被吃掉了，非常奇怪。
	3. 对于输入框，当鼠标点击失焦的时候只有change事件发生，并没有mousedown/mouseup/click事件发生，非常奇怪。
*** 仅仅通过mousedown/click，碰到单选框/复选框的时候就会出现问题。
*** 根本不用设置全局变量，设置全局函数就好了，把变量私有化，然后当要操作这个变量的时候使用全局函数就好了，这样能够保证模块结构的清晰，避免写出意大利面条式的代码结构。
*** 实际上通过mousedown与click来区分直接调用与代码调用是设置了一个范围来实现区分的，所有在这两个事件之间发生的log请求是能够被发送出去的，其他的无法发送，这种方式对于button是好使的，但是对于checkbox/radiobox/text/textarea就不行了。
** 2017/02/28
*** TODO 给函数增加额外的参数，通过主动传参的方式实现埋点，这样如果是主动调用，在调用的地方传递这个参数实现埋点，如果可以控制调用的地方，确实可以实现埋点控制，但是如果我们不能控制参数，比如通过trigger触发的，那么就坑爹了，如何解？
*** TODO 自己构建一棵树，然后试验广度优先遍历深度优先遍历。
*** TIPS position relative是一个非常有意思的布局，这一布局首先是能配合absolute布局指定参照物，另一个用法是使元素相对于原有位置有一定的偏移，它不脱离文档流，本身还是占据着原有位置，可以压盖其他元素，这一定位方法在细微调整元素位置的时候非常有用。
*** a(...)(...)(...)(...)(...)(...)...实际上所有复杂系统的代码都可以看成是这样写成的，需要格外注意的是这种模式的反模式:
function abc(...){
	return function def(...){
	    return function hij(...){
		    return function lmn(...){
			    ...
			}
		}
	}
}
换一种写法：
(...) => (...) => (...) => (...) ...
这就是无穷的柯里化。
*** TIPS js map方法的回调实际上有三个参数，第一个是元素，第二个是元素索引，第三个是数组，不要忽略了第二个与第三个参数，这能为你写出更加强大的map函数铺路。
*** TODO es6增强的字面量语法允许我们少写key，少写function,少额外添加key。这几个特性非常有用.
*** 解构语法实际上与增强的字面量语法是一对，两者实现的功能正好相反。解构语法能够允许我们一次性的从对象中提取几个属性，字面量语法能够允许我们一次性的将这几个属性重新合并成对象，这样在核心代码部分我们只使用到对象中的几个字段，代码看起来就非常清晰了。
** 2017/03/01
*** TIPS es6给数组增加了三个方法：
	1. fill,用来快速给数组赋值，特别是区间赋值.
	2. includes,用来判断数组中是否有某个元素，有了它，我们再也不用使用"indexOf(xxx) !== -1"这种非常丑陋的写法了。
	3. find,类似于includes，不过它的参数是一个回调函数，用来高级查找。
	这三个方法大大拓展了js数组的能力，使得我们能够更加简单方便的进行函数式编程了。
*** TODO new Array(3).fill({}).map((item,idx) => {item.aaa = arr1[idx]; return item;})如何用最简单的方法将几个数组合并成一个数组？
*** TIPS Array.from是一个非常强大的构造数组的方法，它的用处不止在于把Map/Set/arguments转化为数组，它的精髓实际上在与第二个参数callback上面，它能制定一个初始数组，然后指定一个变换规则，这样我们就可以直接生成非常复杂的数组了。
*** babel与webpack并没有什么关系，babel有自己的配置文件.babelrc，我们只需要在这个文件中修改下配置就可以实现转义不同的规则了。
*** angularjs：
	模板编译与监听compile,link
	检测数据变化与同步apply,digest
*** iframe有自己的document，这个document并不是父页面的document.
*** TODO 面向接口编程,利用接口的多态特性实现对拓展开放，对修改关闭。
*** app.js结构:
	show() --> _boot() --> 
	                       1. _appendTpl()
							  1) appendTpl to it's parent
						   2. _bootstrap()
							  1) compile and link
						   3. _initDom()
							  保证append了之后bootstrap，这样模板自然能够自动的compile与link。
	init() --> _initApp() --> setAll() --> controller/factory/service/filter/component set --> register()
*** TODO ctrlTools.js结构：(使用atomClass拼装tpl模板，然后添加到页面)
	setCtrl --> fix --> cb --> prefix ????
	1. addCtrl:
	   1) assign data to scope
	   2) call fix(pre)
	   3) call callback(after)
	   4) call engine(core)
		  1) find angular element
		  2) injector and invoke
		  3) compile and link
	2. setCtrl:(is similar to addCtrl,but more complex)
	   1) register deps
	   2) call prefix(prepre)
	   3) call addCtrl
	3. combineTpl:
	   1) loop data array
	   2) for each data item
		  1) atomClass it and return tpl
		  2) append tpl to instanceArr
		  3) callback continue process

	convert to linked call to pipe???
*** TODO angularjs invoke?
*** TODO 不要使用trigger，使用封装后的trigger，允许trigger传入额外的参数进行埋点控制。
** 2017/03/03
*** TIPS chrome控制台中查看jquery版本方法：$.fn.jquery.
*** DONE nodejs require全局库的方法————添加path与NODE_PATH路劲，然后就可以require到了，值得注意的是webstrom的控制台有问题，依然会找不到。
*** 25B2=▲ 25B3=△ 25BA=► 25BC=▼ 25C4=◄
*** box-shadow: x-offset y-offset blur-radius spread-radius color
	text-shadow: x-offset y-offset blur-radius color
	box-shadow实际上就是多了一个参数，参数顺序都差不多。
*** TODO 我从未整体性的、系统的思考一下jquery，要找个时间补上。
*** TIPS document.styleSheets can note all of the styleRules in current document,we can operate the rules manualy to change the document's style.The key methord is insertRule/addRule.
** 2017/03/04
*** 街景虽然不做了，但是照片还是得拍，而且必须拍，因为拍照片是获取地图数据最主要的方式。一个是照片，一个是轨迹，这就是地图。
*** TIPS map/reduce/filter...这些高阶函数实际上就是表示的if/for的意思。
*** IMPORTANT 事实上，柯里化是缓解函数参数过长的利器，一个函数如果参数过长，常常是一个不好的信号，表示这个函数依赖了太多的东西，做了太多的事情，应该拆分。应该对参数进行柯里化，把参数分类，然后参数就缩短了，函数的逻辑就清晰了。
*** onclick的本身就可以传递参数，因为onclick后面接的可以是一个表达式，当它后面跟的是一个带参数的函数调用时，就可以实现参数传递了，并不需要任何框架或是库的支持。它与addEventListener是有很大区别的，最大的区别就在于函数参数上，其次就是是否允许添加多个。
*** TODO 如何区分是trigger触发还是用户点击触发？
*** IMPORTANT 事件有什么作用呢？最大的作用就是它可以绕过模块顶层API，直接向外界传递信息。
*** IMPORTANT 一个模块到底是什么呢？从实现角度来说实际上却是就是UI+event binding+event handler。但从外界来看实际上有个全新的角度，它是props+events+api。我们使用props来对模块进行定制，使用api来行使模块功能，使用events来拓展模块功能，这样模块的任务就完成了。
*** 一个组件怎么写可以参考别人是怎么来写的，这在多数时候是非常有用的。
