* 2016/07
** 2016/07/04
*** 编写符合开闭原则的代码实际上很简单，只要使用全局变量就可以了。实际上，类也可以看成是是全局变量。
*** lodash集合操作：
	1) 交集：intersection
	2) 并集：union
	3) 差集：difference
*** 如何最快的处理很多种情况？要对类型进行再分类，可以合并的类型要合并。
** 2016/07/05
*** 怎样让逻辑严密，无懈可击？秘诀就是要分清在问题中有几个变量，然后每个变量有几个值，再一个变量一个变量考虑，比如由三个变量，这三个变量分别有3、4、5个值，那么一共就有3*4*5=60种情况，要想做到不遗漏就得一个不落的考虑到。
** 2016/07/06
*** 每个类都应该是一个服务，给外部提供功能接口并封闭细节，通过这种方式将业务逻辑与底层实现解耦。在js中，这种方式体现为文件，一个文件就是一个服务提供者，它依赖（require）于其他的服务并向外层提供新的服务。这才是软件易维护与易拓展的秘诀。
*** 也许我应该找个全栈开发的职位来做，不要永远窝在一个小的方向，要各个方向都积极尝试，这样才能融汇贯通，深入理解各种技术的本质。待在技术的舒适区没有太久了非常不好，要勇于尝试新技术。
*** 其实程序员本身就是程序的重度使用者，只不过程序员更多关注的是新的功能，而程序使用者关注的是使用程序来完成特定的事情。
*** 关于单向数据流动与双向数据流动实际上从函数里就可以表现出来，如果从输入参数里面传递输入同时也传递输出，那么这种流动就是双向的数据流动，这种数据流动方式修改了输入数据，使得别人分不清哪些是输入，哪些是输出，是一种不好的编程习惯；而如果从函数参数里面输入数据，使用返回值输出数据，这种就是单向的数据流动了，单向数据流动代码可读性，可维护性都比较好，我们应该尽可能的写单向的数据流动，而不应该使用双向的数据流动。
** 2016/07/07
*** 特效的图标定位问题其实是一个非常有学问的问题。如何实现不遮挡道路，在道路旁边显示？如何实现防止几个图标之后自动换行？
*** 已经偏移了背景，但却没有偏移背景中的元素，因此出现了偏差。
** 2016/07/08
*** svg是一堆dom子元素，这也就是说当我们与dom子元素进行各种交互，比如鼠标键盘事件等，我们都是可以收到事件通知的，只要我们愿意，我们就可以基于此进行事件处理。而canvas只是一个图形标签，类似于image，相比于svg，我们需要自己对它编写一套事件处理系统，相比而言，就麻烦点了。
*** 实际上，自己实现一个事件系统也没那么的麻烦，我们只需要记住每个元素的bbox，当鼠标键盘事件发生的时候截获下系统事件，然后再遍历下子元素，如果包围盒发生了重复，就可以判定为发生了某个事件，然后再在其他地方进行事件处理就行了。简而言之，事件系统是基于坐标的。
*** 实际上，键盘事件、鼠标事件这些东西都是全局的，由操作系统管理的。当他们发生之初，操作系统实际上并不知道到底是哪个对象发生了这个事件，是通过后续的遍历才使之感觉到了发生事件的对象，如果这个对象上有事件处理函数，那么这个函数就会被调用。
** 2016/07/09
*** 作为人生活的世界，人在这个世界中的随机应变能力永远是最强的，计算机永远也不可能赶上。现实世界太复杂，计算机只能通过穷举的方式来进行情况处理，这就决定了它们永远无法处理一些意料之外的情况。
*** 前端一般情况下是不允许存放数据的，所有的数据都应该放到后端去处理，这样只要后端修改了数据就能立马反应到前端上面来，维护起来比较方便。但通过这种方式实际上饶了一层弯路，前端需要数据存储是总要去后端协调，还要定好接口一类的，费时费力。所以，更加合理的做法是――――只将重要的，容易变化的数据存放在后端，其他的数据存在前端也是没什么问题的。
*** redux的核心是stroe，我们可以通过一个事件派发器（reducer）建立一个store，然后我们可以我们可以订阅一个事件后处理器（比如一个render），当某个特定的事件发生的时候，这个事件会被派发到事件派发器（reducer）中进行处理，当处理完毕返回数据后，这个数据会被继续推送到事件后处理器中，去响应这个事件的后续处理，比如界面更新、存储到外部存储设备等。通过这样一种流式处理的方式，就完成了单向的数据流转。概括起来流程如下：
	浏览器事件 --> redux事件 --> reducer事件派发 --> 事件处理 --> 事件后处理
*** redux的核心思想中有一条非常重要的原则――――单向数据流，就是数据从输入参数流入，函数复制输入参数并对输入参数进行一些变换然后从输出参数流出，整个过程不改变原有数据，这种做法有什么好处呢？能够维持一个清晰的数据流，我们并不用返工去看当前变换是否会改变之前的数据而回头去看代码。
*** 写代码能力差的人最常犯的错误就是写代码没有层次感，所有的代码都是写的最底层的基础代码，没有什么通用性。能力强的人就不一样了，这种人写的代码具有非常强的通用性。
*** 何为产品经理？产品经理应该是对产品需求的整体把控人，他们应该有自己的想法，哪些需求合理，哪些需求不合理，哪些紧急，哪些不紧急，应该先做什么功能，哪些应该先延后，都应该有自己的判断，不能仅仅只是做个传话筒。
*** 编程的能力并不在于使用库完成一件事的能力，而是除去库与接口之后的部分自己独立完成的能力。
** 2016/07/11
*** 基于持续变换的思想，编程就是一个不断的持续变换，很多时候一个需求实际上就是在某个变换环节加上一个变换，纯函数就是实现这种变换的媒介。
** 2016/07/12
*** if(a) ... else if(b) ...与 if(a) ... if(b) ...的差别:
前者是一旦是这种类型就不再判断另一种类型，是一种非此即彼的互斥关系；而后者是一种可能既有这种情况，又有另一种情况的包含关系,出现这种情况实际上表示分类没有分清楚，有可能存在既是这种情况，又是那种情况的关系。
*** 确实存在一些测试无法介入的情况，比如：
	1) 有时候逻辑太过复杂，测试需要重新理顺需求就非常费时间。
	2) 有些界面类的UI，UI都没有问题，测试拿着UI提供的临时稿质问开发就不大合适。
	这时候直接让开发者与需求提供者对接会更有效率。
*** 对象实际上只不过是一个关联数组，也就是一个特殊点的数组而已，我们完全可以用一个普通的数组来进行模拟。而数组实际上也只是一个集合，我们可以使用整数作为key来索引到其中的元素。从这个基础推论开，其实编程的世界只有两种类型，简单类型和集合类型。
*** 作为一个集合，需要具备以下几个基本的能力：
	1) 遍历key的能力。
	2) 通过key查找对应value的能力。
	只要具备了这两个能力就是一个完备的集合了。注意key与value是简单的一一对应关系，不能一对多，真要一对多的话，要将这个多通过集合的方式继续封装成一个一，通过这种单值与多值的组合，我们可以构建出任意复杂的系统。
** 2016/07/13
*** 为什么前端也需要一个后端呢？其实后端比我们预想的能够做更多的事情，后端并不是就等于数据存储，后端代表着数据处理，我们在编程中需要很多的辅助处理，这种处理能够让我们使用更简单的方式去处理问题，提高我们的工作效率。
*** js是一门编程语言，并不是一门前端语言，它既可以写前端，又可以写后端，实际上，它可以做任何事。
** 2016/07/14
*** 实现解释器的关键在于解构以及重构，如何从代码文本中抽取出一个个的词法标签，然后再对这些标签进行重新组合并求值。
*** 解释器与转译器有着千丝万缕的联系，这两者的前一半部分是一模一样的，都是对文本进行解构，只不过前者对文本解构之后进行的是求值化简，而后者进行的是重新组合，前者最后会算出一个值，而后者会得到一个被转化成为新形式的文本。
	不管是解释器还是转译器，其第一步都是解构，主要的部分都是分词。如何分词，根据文本的表现形式，实际上构建起来的难度差别非常大。
	实际上不管解释器还是转译器，他们的构造过程都可以归纳为解构与重构。
*** 在分词的过程中，保不保留分隔符是一个非常容易让人感到困惑的问题，最常见的做法是除了空格与换行，其他的分隔符都应该保留。留下它们虽然表面上看浪费了空间，存储了不少多余的字符，但其实这些字符中存储着词的结构，留下他们能够为我们后续将词转化成树提供莫大的方便，是非常值得的。
*** TODO 事件是一个很灵活强大，同时也非常容易被误用的东西，到底应该如何使用它才合理呢？最常见的合理用法是用来向上层传递数据，这样我们就不需要在下层写业务逻辑代码，实现界面与逻辑的分离了。当然，向上层传递数据的方法不是仅限于这一种，还有一种很常见的做法是使用回调函数。但是，使用回调函数实际上存在着诸多缺陷，比如：
	1) 每增加一个数据传输，就要在参数上多加上一个回调函数参数，这样，当参数多了之后显然不好看。当然，我们可以通过一个专门的参数来把所有的回调函数都放在里面来控制参数的长度。但是，即使

** 2016/07/15
*** defs元素是svg里面的代码块，我们可以在这个区域里面定义变量，实现图形元素的复用，合理的使用这一元素能够大大减少svg的长度，如果再允许使用
*** 为什么尽量不要使用基本的数据类型而要使用封装的数据类型呢？因为基本的数据类型不便于拓展，无法简单的增加新的功能。比如如果我们使用一个字符串来表示一个token,当我们需要给token增加其他信息的时候就不是那么容易。而通过封装数据类型，比如对象，我们可以轻而易举的对这个类型进行拓展，加入其他的token信息，以便于我们对这个token进行继续处理。这也就是为什么在很多语言（比如Java、c#等）要把一切都设计成对象的原因。
*** 对象的本质是什么？对象不过是一种对数据进行封装的方法，用来将几个相关联的数据放在一起。它实际上给我们提供了一种拓展数据结构的能力，使得我们可以在并不需要修改已有算法的情况下添加新的算法，实现整个对象的功能扩充，我们并不需要改变对象的名字就可以使对象直接拥有新的功能，这种能力确实非常强大。
*** 对象实际上给我们提供了一种快速创建复合数据的能力，使得我们可以一次性的创建一堆数据，只要我们修改了对象的构建方式，以后就可以一次性的使用新的数据格式。对象类似于给我们现实生活中的物体添加了一层新的维度，使得我们识别了这个信息，只有先识别出了这个信息，才有可能对这个信息进行处理。
*** 对象为什么要有构造函数呢？因为人们在使用对象的过程中发现经常有这种重复操作，我们需要给对象一个个赋值，我们迫切需要一种对这种一行行的重复代码进行抽象的方式，构造函数应运而生，从此，我们只需要一行代码就能实现对好多属性进行赋值，大大方便了对象的构造。
*** 实际上，函数也分为两种，一种是提供给外部做接口使用的，这类函数要求清晰易读，参数少；而另一种是内部用来实现功能的，这类函数可能要考虑函数实现的需要，很多时候要添加额外的参数以提高代码的灵活性，但为了用最少的代码实现最复杂的功能，这是必须的。
*** 递归函数适用于底层的代码实现，并不适合于高层的代码构建，因为递归函数写好之后修改起来就有不小难度，不好维护。
*** 事实上，递归虽然极其强大，却非常容易被误用，有个常见的误用就是在递归函数里面添加代码，递归应该是纯净的，不应该掺杂进其他的逻辑，如果真的要往递归里面添加其他的判断逻辑，合理的做法是在递归的结果中遍历，而不是在递归中直接修改。
** 2016/07/17
*** 编程是什么？编程本质上只不过是一个查表，通过我们输入的符号找到对应的新的符号。如果左边的符号长，右边的符号短，就是一个求值器；左右一样长就只是一个转译器。另外，求值器还有这样的特征，它能将不同类的东西最终都变成几个基础类型的东西，完成继续化简。
*** 理论上来说，只要经过无限分解，任何布局都可以简化为几种最简单的布局，不要在一个层级混用几种结构的元素，这才是css布局的精髓。
*** 函数有一个非常重要的好处就是它可以允许我们始终只在一个层面上思考问题，而将底层的实现给忽略掉，它可以将问题逐级分解，始终保持问题的规模在很容易理解的范围内。
** 2016/07/18
*** before/after伪类实际上提供了一种能力，允许我们用一个元素代表几个元素，实现一个元素，几个样式。
*** ps想要导出某个带有透明背景的路径图层实际上很简单，只要将这个路径栅格化，再选择栅格化后的图层新建个文件，将这个图层粘进去，然后关闭背景图层，将剩下的透明图层保存成png就可以无损的抠出这个图层，保留透明背景的哦。
** 2016/07/19
*** 绝对定位配合before/after伪元素绝逼是个神器，他可以让我们在不添加新的dom标签的情况下修改一个标签的形状，在这个标签的任意位置加上其他元素，特别适合于用来给一个标签添加额外的样式，同时又不修改dom结构。
*** chrome timeline的妙用――――抓取关键路径的函数调用图，通过搜索得到关键函数得到函数调用的顺序。
** 2016/07/20
*** TODO 如何追踪网络请求是从哪一行代码发出的，这个目前是chrome比较难的一个问题，目前并没有一种简单的方法来做到这一点，只能通过事件请求一步步猜追到，如何做?
** 2016/07/22
*** 矩阵的意义到底在什么？它能将数据集变换简化成为加减乘除，大大减轻了脑力负担。
*** 使用高阶函数封装另一个函数到底有什么作用呢？作用就在于我们可以控制传入函数的调用时机，我们可以根据不同的输入参数动态的调用另一个函数，逐步提炼出我们系统当中真正的数据，实现数据与代码分离。
** 2016/07/25
*** 如果允许往对象里面随意添加字段，那么这个对象就会非常混乱，难以维护，调试起来也是个巨大的麻烦。

** 2016/07/26
*** 如何实现自动的资源管理？我们应该知道一个资源在什么时候会被开辟，什么时候会被释放出来，只有这样我们才知道资源管理。
** 2016/07/27
*** 函数就有这么一个特性――――延迟计算，写在函数里面的变量，如果使用了外部的变量，而此时变量尚未定义，没有关系，这里面的代码并不会被马上执行，所以无需担心变量未定义的错误，只有你再代码中的某个地方显式调用了这个函数，解释器才会在这个时候去判断这个变量是否存在，此时所有代码都已经加载，很可能就已经可以使用那个未定义的变量了。
** 2016/07/28
*** 关于浏览器的position定位方式，常用的有四个值：static、relative、absolute、fixed。第一种static方式是从上到下，从左到右排列，是默认的排列方式，它是相对于文档流中的”上一个元素“进行排列的排序方式；第二种是将部分元素相对于”它本身“原始的位置进行偏移，其依然是在原始文档流内，这只是一种对于个别元素进行部分偏移的方法；第三种是相对于其”父级第一个非使用static定位方式的元素“来进行定位的方法，它会脱离文档流；第四种是相当于”浏览器窗口“来进行定位的，它也会脱离文档流。
*** 现在我们所用的浏览器一般来说主要有三种定位方式，相对定位、绝对定位与浮动定位。相对定位是一种相对于元素的“前一个”元素进行定位的方式；绝对定位是一种相对于“某个父元素”进行定位的方式，由于它只是相对于某个元素，已经绝对定位的元素之间可能出现遮盖的情况；而浮动定位是“先相对于文档流里面的某个元素，在相对于已经浮动的元素进行定位”的定位方式，由于双重相对，所以它至少是不会遮盖已经浮动的元素的。
*** 相比于网页中元素的定位方式，svg的定位方式就没有这么智能了。你只能相对于坐标原点一个个的算元素的位置，并不能相对于某个元素算，元素之间出现遮盖也没有什么办法。
*** d3如何处理更新？有两种方法，一种是比较简单粗暴的方法，先将所有元素都给删除掉，然后重绘，这种方法虽然简单但效率较低；另一种是将d3的三个集合一一处理，update集更新属性，enter集新增节点，exit集删除节点，这种麻烦点但效率较高。
** 2016/07/29
*** 某个异步操作可能失败，但我们依然要进行成功后的判断怎么办，使用外部变量来进行状态共享，只有在成功的时候才进行接下来的同步操作。
** 2016/07/30
*** 矩阵最初的作用是用来求解齐次方程组的，所以很多运算规则是基于线性方程组而来的，比如矩阵乘法为什么会有这么奇怪的规则，就是为了跟线性方程组形式上一致。
*** 矩阵乘法为什么会有如此奇怪的规则呢?这个得从矩阵的源头说起，因为它最初是用来求解线性方程组的。线性方程组最初的表示法决定了矩阵乘法应该这么定义，运算的时候，联想到线性方程组就可以比较容易的写出算法了。
*** n元一次方程至少需要n个算式才能求出唯一的解，但并不是说只要给了n个算式就可以求出它的唯一解，只能多余等于n，不能少于n。这是我一直以来脑中的一个错误观念，一定要纠正。
** 2016/07/31
*** "d3.$(document.createElement('div'))"允许我们建立一个虚拟的dom元素，然后基于此元素进行dom绘制，这样就打破了"总是要先知道父元素，然后才能往下绘制"的枷锁，使得我们能够先绘制出自己想要的dom元素，然后在某个合适的时刻把这个dom元素添加到整个dom树上，大大拓展了d3的灵活性。那么，这一点是如何做到的呢？其核心原理在于连接两个d3的selection，这样，绘制的时候就能够把父节点以及子节点一起绘制出来了。
** 2016/08/01
*** TODO 数据类型是什么？数组是什么？对象是什么？
*** symbol有什么作用？首先它可以用来当做唯一的key。
*** 写可重用组件的核心是数据分离，因为数据是最容易变化的东西。此外，写组件不同于写功能代码的另一个方面是它需要考虑到可拓展，因此，不要丢失数据也是非常重要的一条准则。
