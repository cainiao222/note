* 2018/02
** 2018/02/07
*** IMPORTANT 早期版本chrome bug：
#+BEGIN_SRC javascript
	var logx = console.log; // fail
	// var logx = console.log.bind(window);    // fail
	// var logx = console.log.bind(null);      // fail
	// var logx = console.log.bind(console);   // ok
	
	alert(1);
	logx('aaa');
	alert(2);
#+END_SRC
	这个bug出现的原因可能是早期版本的console.log函数使用了this，当我们使用console.log时this值是console，这时没有问题，但一旦我们将这个函数赋值给其他对象并调用，this就变了，此时再调用这个函数就有可能出问题。血淋淋的教训。底层的实现可能是这样：
#+BEGIN_SRC javascript
	var obj = {
	    aaa: {
	        sss: '123'
	    },
	    bbb: function (arg) {
	        var b = this.aaa.sss + arg; // error
	        // var b = obj.aaa.sss + arg;  // ok
	        return b;
	    }
	};
	
	alert(1);
	var fnbbb = obj.bbb;
	var ttt = fnbbb('555');
	alert(2);
#+END_SRC
** 2018/02/09
*** TIPS psd多图层合并导出技巧，先使用shift键选中所有需要一起导出的元素，然后在右侧图层列表上任一选中图层处右键，选择"从图层建立组"，建立组文件夹，然后在组文件夹上右键，选择"快速导出为PNG"，就可以了。
*** 通用频道 --> 爱奇艺电视页面 --> 联通冰淇淋页面
** 2018/02/23
*** TIPS 利用韦恩图来理解&&与||，&&相当于减法，||相当于加法。
*** 账号：
	Uid  : 1517094470
	手机 : 11100000586
	邮箱 : Test100527@qiyi.com
	密码 : Test_8299
	昵称 : Test_Online852046
	账号回收时间 : 2019-02-23 16:43
	环境 : 线上
** 2018/02/24
*** TIPS vue的computed不止可以从data中获取（get）数据，还可以从props、store中获取，不仅如此，我们还可以使用computed来更新（set）数据（当然，set数据更好还是使用methods来做）。
** 2018/02/25
*** 编码进阶――――使用三层模型结构并划分职责。
	+ 最外层负责与外部沟通交流，负责API接口调用，androidParams更新，url参数处理等。
	+ 中间层处理接口数据与ui数据的转化，事件接收与处理（或是继续派发到上层与外部交流）。
	+ 最里层展示ui数据与抛出事件，通知中间层进行处理。
	这样就能得到一个比较优雅的代码结构了。
*** TODO 事件能够将代码分层，从而将代码拆分到一个个文件中。
*** vue中，如何解决props修改了，但是ui没有刷新的情况？出现这种情况的原因是props没有关联到ui数据中，虽然props修改了，但是没有被ui watch，自然就无法实现响应式了。你可能是通过硬编码的方式强行写入到ui数据的。想要解决这一问题有两种方法：
	1. 手动添加watch，这样一旦props发生改变，watch函数就会被调用，ui自然就更新了。这种方式虽然可行，但不优雅。
	2. 使用computed，computed是自动watch的，这种方法才是解决这一问题的正解。
*** TODO vue中，组件的展示与隐藏是一个非常常见的情形。vue的状态中有很大一部分就是这个布尔值，如何
** 2018/02/26
*** 不应该以直接修改状态的方式来管理状态，这样容易让开发者陷入状态海的包围中，应该按照用户期望的功能来，一个系统再怎么复杂，其要完成的功能就那么几个。
