* 2016/12
** 2016/12/03
*** 抽象能够建立起一层屏障，使得我们站在更高的角度思考问题，忽略实现细节，从而控制实现的复杂度。
** 2016/12/05
*** TODO 如何管理图层？
*** LayerBase是基本图层，LayerSelector是图层管理器。图层分组，将图层分为single层、multi层和silent层，然后一层一层管理。
*** 大量使用类继承对于模块化是很不利的，因为你想抽出某个部分可能依赖一大堆类，这样抽就会变得很难。
*** TODO 是用继承还是使用关联，这是个问题。
*** 限行平台整体结构。整体分为两个部分，规则编辑部分以及面编辑部分。规则编辑部分只能选面以及编辑规则，面编辑部分能够查询与修改面，修改之后保存，然后就可以在规则编辑部分编辑了。
** 2016/12/06
*** 逐字符扫描是处理字符串的最后方法，这一方法总是可以好使，就是容易遗漏，属于不是方法的方法。
*** 纯函数非常便于测试，它不依赖系统中的其他变量，所以只需要测试指定的函数，并不需要重启整个系统（网页的刷新就相当于重启），也就是说它使得我们具有了写好即测的能力，不需要管整个系统。
*** 其实web编辑器通过自建的任务与账号体系，一开始就打造了一个鉴权系统，这样后期进行各种操作就不再需要向后端鉴权了，当用户编辑完成以后，点保存时才会继续与后端交互，这样就减少了操作，提高了效率。
*** web编辑器的grah数据体系，数据查分保存，这些都是非常高端的东西。
** 2016/12/07
*** TODO 传递函数给上层，这样这个函数什么时候调用由上层来控制，你不用管。只需要按照上层规定的函数定义使用函数的参数并作出一些修改，上层就能感知到并且在需要的时候进行调用。
*** 一个文件夹只保留一个入口，不要直接引用其他这个文件夹中的其他文件，这样依赖关系会比较清晰。
*** 观察者模式实际上是非常常用的模式。其核心思想是提前提供数据注册，当事件发生的时候依次使用。比如常见的事件系统就是观察者模式，还有事件平台的右键菜单实际上使用的是观察者模式，把所有的右键菜单对象提前注册进数组，当事件发生的时候一个个判断是否是active状态并调用响应函数。观察者模式的解耦效果还是非常好的，不需要修改已经写好的代码，只需要提供数据，需要的时候别人自然会来调用你。
** 2016/12/08
*** 想要实现自动铺满有两种方法，一种是使用flex布局，给你想自适应的部分添加"flex:1"属性；另一种是使用绝对定位，给你想自适应的部分设置top与bottom。
*** 使用百分比布局有个缺陷就是必须一级一级设置，任何哪一级没设置，都会出问题。
** 2016/12/09
*** 面向对象编程多态是一个非常重要的概念，js里面实现多态的方式就是原型链，通过在子类对象上绑定新的值，父类，也就是原型链上的值就被覆盖了，这样子类对象取值就是新的值，多态就实现了。
*** DONE 事件的本质是订阅发布模式（也叫观察者模式），这一模式实际上是一个连接件，它可以将两个东西连接起来同时保证这两个东西之间没有互相依赖。它通过提前的信息收集，然后需要的时候取用来做到这一点，更好的地方在于，它还顺带实现了一个作用域，当你不需要使用它的时候，你可以将它合理的回收，不会产生资源泄露。
*** 依赖注入实际上并不是什么神奇的东西，它的核心原理实际上就是将所有依赖放入一个公共的地方，需要的时候直接从这个地方取。这样AB的互相依赖就转换成为了它们对第三方地方的公共依赖，这样就简化了依赖关系，提高了可测试性、可维护性。requirejs，webpack实际上都是这样的一个依赖管理框架，只不过两者的实现原理不尽相同。它实际上就是一个观察者模式。*** leftClick的handleEvent需要做两件事，一件是添加事件监听，另一件是处理事件监听。
*** 因为onClick的时候添加了事件处理，然后马上数据返回触发了事件处理。
*** 以图层为单位来管理地图元素。
*** js最常见的继承手法————B.prototype = new A()。这样B new出来的对象就是继承自A的了。
*** angular核心————通过controler函数注册模块，通过ng-controller绑定模块到视图。
** 2016/12/10
*** bootstrap的网格布局是非常好用的东西，但也不能乱用，在比较关键的地方还是得用普通的css布局，这样灵活性更好。
*** 不管是leftclick还是rightclick都会触发对所有图层的遍历，如果某个图层的这两种操作上绑定了事件处理的话，对应的菜单项就会显示出来，点击进入对应处理。
*** 左键菜单是"link.js"上的请求弄出来的，表示这个点附近的道路id，用来使用线；右键菜单是"copyToClipBoard.js"、"link.js"上弄出来的，用来使用点。
*** 事件系统之所以需要这么频繁的向后端发请求，是因为前端并没有一个公共的数据存储，所以每当需要数据时，只能向后端重新请求数据，这是导致用户体验不好的根源，如果能够建立一套前端的数据库，不依赖后端的数据，这样，用户体验必然能够大大提升。
*** bind可以实现提前传参却不调用，其实函数调用默认会做两件事情，一件是参数绑定，也就是bind所做的事情，一件是函数调用，bind将这两者分离了开来，使得我们能够在运行期只绑定参数，真正需要值的时候才去求值，实际上也是一种实现lazy evaluation的方式。
** 2016/12/12
*** TODO 依赖管理是个极其重要的东西。像c++的requirejs、webpack、angularjs的DI，还有c++的function/bind，甚至23种设计模式中的大多数都是在解决这个问题。
*** 进一步的讨论表明，interface的粒度应足够小，或许包含一个method就够了，那么interface实际上退化成了给类型打的标签(tag)。在这种情况下，完全可以使用boost::function来代替。————陈硕《以boost::function和boost:bind取代虚函数》
*** TODO a.b(arg,fn(arg1,arg2...)).c(arg,arg,fn(arg1,arg2...)).d(fn(arg1,arg2))这种是不是就是所谓的函数式编程呢？
*** DONE 互斥的正确解法是什么呢？其实很简单，也就是加个私有变量而已，初始值为空，当设置新的值的时候，需要首先判断之前是否有值，如果有，就先将这个值置为空，然后再设置新的值就好了。
** 2016/12/13
*** DONE 编程的过程中，虽然多数时候是做业务，但是你需要有意识的从业务的东西中抽出非业务的东西然后用这些东西来干活，只有业务无关的代码才能被复用。比如现在的各种框架，它们都是业务无关的，正是因为业务无关，所以才能被用在各种业务中。
*** DONE 组合优于继承，这是非常重要的编程概念。因为组合可以让我们来自由组装依赖，而继承是提前定死依赖的。具体做法是尽量通过函数参数（包括构造函数）来传递依赖，而不要通过继承。
*** bind是用来做提前参数绑定的，它能忽略实际调用时候指定的参数而使用预先设置好的参数，它能将动态作用域改为词法作用域，它最主要的作用就是用来忽略实际调用时候给定的this。
*** TODO 实际上道路上的新车引导线箭头是一颗树遍历，节点的parentWays就是这个节点的子树。
*** 不要给用户写非常复杂的逻辑。
** 2016/12/14
*** 默认情况下，绝对定位是基于元素的左上角的，如果想基于元素中心的话可以加个transform属性做个偏移，这样就能实现元素居中而不是左上角居中了。
*** css中，100%元素宽高是基于它的逻辑父级元素，而不是父级DOM节点，这也就是说，如果我们对一个元素使用了absolute/fixed/flex这样的布局，它的100%可能就变了。
*** 实际上网页就是一块画布，跟底图的画布是一样的东西，它也有图层、元素的概念，也是一个个渲染出来的。
*** 为什么要使用语法树作为解释器的基础而不是token，实际上这只是为了提效而已，提前将元素信息给存储下来，避免反复运算。
*** layerSelecor.js图层管理器，当新的图层被加入时，所有图层都会被扫描一遍，不在图层管理器中的图层将会被删除。
*** DONE 为什么函数越短越好，因为只有这样才能获得最好的可组合性。
*** Object的defineProperty()方法允许我们用更精确的方式来创建对象的属性，它使得我们能够在取值与设值的时候做出某些处理。控制属性可不可以被修改，可不可以被枚举，可不可以被删除，是对对象能力的非常牛逼的扩充。
*** TODO 对象可不可以被枚举是非常重要的。
*** Object.prototype.watch。this function can watches for a property to be assigned a value and run a function when that occurs.
*** Object.freeze(obj) can avoid a obj to be modified.
** 2016/12/15
*** cookie与session都是为了克服http无状态缺陷所作出的一个努力，它们用来纪录请求的状态信息。这两者的不同点在于cookie采用的是客户端纪录，id与信息都保存在客户端；session采用的是服务端记录，只是id保存在客户端（可以保存在客户端cookie、url、form表单等等），信息保存在服务端。
*** 其实不去考虑cookie与session，http协议还是非常简单的。
*** websocket是html5提出的一种新的协议，它与http的不同之处在于它不像http是即连即断的，而且只能单向通信，但是它是一个长连接，它可以一直保持连接，而且可以全双工的通信，它的作用主要是用来即时通讯。
*** 多路复用实际上不止是网络上可以运用，编程中也可以。它的核心思想是充分利用闲置资源，一个流程由很多模块串联起来，当一个模块空闲的时候，即时整个流程还没有走完，这个模块就已经可用了，可以处理下一个处理，这对于串行操作的并行化是非常有好处的。
*** TIPS 想查看某个js文件是在哪个文件引入的非常简单，使用正则表达式查找"require.*filename"就可以了。
*** TODO 按照MVC的模型设计，UI上是会绑定数据的，前者成为V，后者成为M，那么如何将M与V互相绑定呢？绑定之后如何由V获取M以及由M获取V呢？可以将M与V都抽象成js代码，这样它们就能自由组合了，然后将M与V放在一个公共的地方绑定起来，这样我们就可以由M获取V以及由V获取M了，同时任意一遍发生变化马上就能反映到另外一边。那么问题来了，如何实现这种绑定？
*** IMPORTANT 如果不采用双向绑定策略，一般的程序编写实际上应该这样，将数据绑定在UI内部，作为UI的成员变量，然后在UI上操作这个变量，当操作完成以后，取这个成员变量作为结果给其他地方进行续处理。这是极为重要的程序编写方式，这一方式能够将V与M区分得很开，即使是现在流行的双向绑定策略，实际上也是在这一模式的基础上发展起来的。而且这一模式还能解决一些双向绑定策略很难解决的一个问题就是————如何缓存结果？（很简单，双向绑定策略绑定是立即生效的，有时我们不想结果立即生效时，不将UI数据立即写到模型就可以了）。
*** TODO 副作用是有用的，虽然函数式编程极力避免副作用，但是副作用真的是有用的。
*** 属性选择器是非常有用但又不常被用的属性，应该得到重视。
** 2016/12/16
*** absolute定位，fix定位不受box-sizing的影响，它们都是内容框对最外框（也就是content对margin外框)。
*** 行内元素之间默认是相对于基线对齐的，具体的就是字符x下方的一条线，如果几个行内元素里面的某个元素变大了，其他的元素也会跟着往下移。可以通过修改任意元素的vertical-align可以修改对齐线。
*** TIPS 前端喜欢在dom元素前面加上一个$,这实际上也是就是匈牙利命名法，$就是类型前缀，与整数前面带个n是一样的道理。
*** angular的controller与controller之间是可以嵌套的，父controller下可以包含很多个子controller。
*** angular在控制器之间传值大致有两种方式，一种是通过消息，一种是通过全局对象（比如angular里的服务、$rootScope等，当然注册到全局也是可以的，但最不推荐）。
*** IMPORTANT 一个合理的MV*架构应该是能够屏蔽与管理消息的订阅、派发的，用户并不需要去一个个监听与处理dom节点与数据。react+redux显然在这方面做得不够，虽然它通过...成功的将消息只限制在子传父，避免了事件的滥用，但是依然暴露给了用户实现细节，这样是并不好的。
*** TODO react+redux只是对事件机制做出了一点限制与升级，其本质还是事件，可以说就为了营销，就创建出了一堆新名词，大大复杂了用户的理解，可以说是非常蠢的一种做法。action是事件，reducer是事件派发，store是事件池。使用时，分别将这三者创建好之后，使用参数依赖的方式，store依赖reducer,reducer依赖action，各种action都可以传入dispatcher。
*** TODO 传统的事件机制有什么缺陷呢？
*** IMPORTANT requirejs中，直接返回一个对象实际上就是最简单的单例模式。
*** 单例模式是非常有用的模式，因为它提供了一种共享数据的优秀方法，数据不必放到全局中去，需要使用的时候就依赖，所有依赖都不存在了就释放（待验证）。
** 2016/12/17
*** 想要解决循环依赖很简单，使用一个数组来存储所有的依赖，看到已经加载就直接跳过就可以了。
*** IMPORTANT 通过网络请求请求本地的文件，这就是AMD/CMD这一堆东西的原理。
*** *** 前端读取文件内容的方法只有网络请求这一种，通过网络请求，请求本地的或是远程的文件，这就是AMD/CMD的各种实现的原理。
*** 通过动态加载script标签是有很大的副作用的，最大的问题这种方式直接将便签中的内容直接添加到全局了，用户无法去控制文件内容的作用域。
** 2016/12/19
*** 关于eval的作用域问题是这样的，eval会把代码添加在Local作用域，它不是全局的，也不是Block的（这点特别注意），当Local作用域释放的时候，它里面声明的代码就会被释放。
*** 想要理解解释器的行为，有个极其重要的概念需要理解————作用域，它是函数定义与调用的环境，负责函数求值过程中变量的求值与资源管理。
*** jquery异步请求一个script的时候，会直接把这个script eval加在全局作用域里面，如果你不想要，可以改下请求类型，不要使用script类型请求文件。
*** TODO 如何在指定的scope中执行eval?
*** TODO 自己实现一套redo/undo系统
** 2016/12/20
*** TODO 如何把代码注入到一个指定函数的scope？
*** bootstrap实际上分为三个部分，一个部分是全局css样式，第二个部分是组件，第三个部分是插件。这三个部分有什么差别呢？本质上来讲bootstrap只是一个样式库，它是基于全局css样式的，但是仅仅只有样式是不够的，样式需要组合，这就是组件，组合之后还要有动作，这就是插件。这三者共同构成了bootstrap，它体现了一个样式库逐渐由简单变得复杂之后的一个升级与简化策略。
*** jquery的插件机制实际上非常简单，它不过是往jquery的prototype上挂函数而已。
*** IMPORTANT js的函数的参数实际上就是向函数的作用域注入代码的最常见的方式。不止js，不管什么语言都是这样。这就是求值的环境模型。
*** 其实后端做数据存储也并不是不行，后端做数据存储也并不是一定不能实现撤销回退，只不过这些事如果交给前端做能够大大减少网络请求数量，优化用户体验。
*** float实际上是一种很好的布局方式，使用它能够将很多元素排在一行，不用管这些元素是块级元素还是行内元素。唯一的问题在于清除浮动。
** 2016/12/21
*** 父级元素设置成auto之后，百分比布局就懵逼了。
*** IMPORTANT 我们可以通过函数来创建域，通过函数参数（包括this）来拓展域，通过返回函数，将父域整体传递给子域，也可以叫做继承。angularjs的作用域就是这么实现的。我们可以在函数中再创建函数来创建一个新域，然后在新域中求值，也可以返回这个新域给其他地方使用。call/apply/bind并不能改变域，它只能改变域中必然有的变量this变量的值。
*** IMPORTANT 模块模式：
	var Module = (function (moduleDependence) {
 	    var privateState = xxx;
	    ...
	
	    var privateMethod = function (innerDependence) {
	        ...
	    };
	    ...
	
	    return {
            publicMethod: function (outerDependence) {
	            ...
            }
	    };
        或
        return function(outerDependence){
		    ...
		}
	})();
其核心在于一个函数里面返回另一个函数或函数组（对象），在外部的function中写私有函数及状态，在返回的函数或函数组中写公有函数，尽量不要使用公有状态，因为公有状态无法修改。
*** js的windows对象有自己专用的eval，用于给windows对象注入代码，但是普通的对象没有evel，这不得不说是这一语言的一大缺憾。但是我们可以通过把对象包在一个函数中。
*** 尝试一种全新的编程体验，一种编程感觉。
*** TIPS 可以把用户信息存储在session中，这样所有的请求就都自动的带上了用户信息了。
*** 控制数据的入口与出口是个非常重要的工作，你应该将所有的数据。
*** 使用promise作为异步编程的基本框架。
*** angularjs的{{}}、es6的模板字符串、还有jsx的{{}}，它们都是一个表达式，表达式的意思就是它自动采用最后的表达式作为返回值，与lisp一样。
*** 通过angularjs的命令比如ng-click,ng-modal,ng-bind等调用的函数自己会调用$apply，如果不是这样的函数，就需要自己手动调用更新UI了。
*** 每当对应的UI渲染到界面的时候，对应的scope函数就会被调用，这是可以做到的。angular就是这么做的。
*** TODO 使用全局变量可以实现拉，但是不能推，想要实现推，就要使用消息机制了。要实现推，只能使用消息机制吗？或者说，要实现推，只能使用SP模式，也就是发布订阅模式吗？
*** TODO 观察者模式也许最大的作用是用于生产者与消费者的解耦。
*** TODO 在程序中设置一个dataService，用来在每个模块间共享数据以及通信。
*** 有一个页面引入一个js，然后由这个js去启动其他js，这就是复杂页面的组织方式。
*** 箭头函数与普通函数的区别在哪呢？箭头函数是没有自己的scope的，它直接使用的是外部的scope，连带着就拥有了外部的this，而普通函数不一样，它有自己独立的scope，当然也就有了自己的this。在编写模块的过程中，很多时候我们并不希望函数有自己的scope，这种情况下使用箭头函数是更加合适的选择。
*** TODO 箭头函数依然有自己的scope，只不过它scope非常特殊，它的scope中没有this，这就会导致它被调用的时候this绑定失败，函数会继续向上层寻找this，知道找到一个为止。它不止没有this，也没有arguments、没有super、不能new。
*** 如何充分利用数据双向绑定，应该尽可能的做到不要复制数据，做到数据共享，这样一个数据变化，所有关联的地方都可以检测到并跟着一起变化。
*** TIPS 可变数据与不可变数据都各自有自己的作用，要灵活运用。可变数据用于维护一份数据，所有的数据修改都走同一个接口。不可变数据用于数据变换，将可变的数据由一个状态变化到另一个状态，不产生副作用，只有当变化真正结束后才写回可变数据，不可变数据还有个好处在于数据是可以追溯的，撤销与重做都会非常容易。
** 2016/12/22
*** 不管切换到哪个页面，都会由页面调用外层的index.js，然后再由外层的index.js调用里层的index.js，从而启动整个页面的程序。
*** TIPS 以html作为程序的入口，由这个入口调起整个程序。
*** 什么是UI组件？UI组件是带有动作的与行为（也就是有js）的UI。
*** DONE 如何最好的处理好选框？angular认为，选框就是一个对象数组，每当我们选中了一个选项，就选中了一个对象，这个对象里面有用于显示的值(item.attr1 for),有用于存储的值(item.attr2 as),我们可以用ng-model来将值传递给js对象，同时也可以将js对象的值传递给选框，完成双向绑定。
*** TIPS 一个优秀的代码架构需要有一个地方来存放工具函数，这些工具函数应该保持纯净，不能有状态，供任何有需要的人随时调用。一个优秀的框架同时也要有个地方用来给人管理数据，而且这个数据不应该被暴露出来，所有对数据的操作都通过函数来进行。
*** angular并没有办法确定两个同名文件是不是同一个文件，所以需要用户显式的指定一个id，这才有了angular.fn('name',function(name))这种形式的API结构。
** 2016/12/23
*** html的有魅力之处在于它可以随意组合。可惜的是它不能模块化，所以现在才有了自定义标签来进行模块化。
** 2016/12/24
*** 其实发布订阅模式有个限制，就是发布一个消息时，消息的所有处理函数收到的参数是一模一样的，这其实也不算什么限制。
** 2016/12/26
*** TODO 写一个属性展示器
[{
label:
type:
options:
readonly:
disabled:
}]
*** 合作的关键在于解耦，两个人的工作之间要尽量减少重合点，否则合作起来就会非常费劲。
*** js是可复用的，但是html就不是了，所以如果把html变成js的话可复用性会好很多。
*** 应该尽量少写public函数，多写private函数。
** 2016/12/28
*** TODO new到底是个什么东西呢？new实际上是一个隐式的返回值，是一个特殊的return,它返回的是this。在所有的js函数中（不包括箭头函数）都有个隐式的this，我们可以将函数与属性挂在这个this中，当我们new这个函数的时候，就产生了一个包含这些函数与属性的新对象了，我们再也不用一个个属性去创建了，从而简化了对象的创建。new是一个函数的输出，它使得我们不需要使用return就可以获得一个对象。
*** TODO 配置管理是应该统一，但是也许并不一定就应该放在后端。
*** webpack整体就是一个立即执行函数，一层一层调起所有的依赖。
*** TIPS webpack只是一个打包的工具而已，你可以把它用在整个工程中，也可以把它用在工程的某个部分，将工程的部分打包。
** 2016/12/29
*** TODO 易维护性到底是什么意思呢？jquery/redux这些东西容易维护吗？
*** TIPS 容器中的所有元素都应该有个id，这样才能快速查找与比对。
*** TODO 抽函数的时候尽量抽与业务逻辑无关的函数，这样可复用性才会好，当然，这是一门非常高深的学问，需要经过长久的联系。
*** 喜欢造工具函数是一个非常好的习惯，要保持。
*** CommonChuckPlugin用于多入口（entry）文件的依赖打包，它会把公共的依赖提取出来丢到一起，这样就减少了重复打包。实际上我们可以这样理解依赖，每个文件的依赖，不管直接依赖还是间接依赖，它归根结底也就是个数组而已，我们自然可以提取出这个数组的公共部分放到一起。
*** webpack的原理实际上很简单，它最关键的部分在于找出一个文件的所有依赖，生成依赖数组，有了这个数组，将每个元素表示的文件放到一起就是个再简单不过的事情了。它的处理过程如下：
	1. 查找入口(entry)
	2. 搜索依赖并处理
	3. 输出
	过程其实非常简单，只是webpack提供了非常多的钩子，可以给我们在中间过程中做出一些额外的处理，比如：
	1. 前置转换，有extenerls
	2. 过程转换，有module的loaders
	3. 后置转换，有Plugins
*** js其实还有个非常好玩的函数方法，写很长的参数，并且按照使用的顺序从前往后写，从前往后一个个参数依次处理，后面的参数可以是个函数，它使用前面的参数处理下作为新的参数，典型的例子就是requirejs。
*** TODO 什么叫做加载一个模块？加载一个模块实际上就是调用模块函数。一个模块由三部分组成，name/deps/callback，分别是模块名/模块依赖/模块函数。
*** 什么是mixin？mixin简单点来说就是实现继承。与interface的规格继承不同，实现继承能够复用实现，而不是复用接口。
*** rest arguments能够在大多数时候替换含义模糊不清的apply。
*** requirejs的define就是将函数封装成模块模块然后加入到模块数组中的意思，require就是利用模块的key取出模块并加载的意思。
*** 什么是Context？Context与Object是什么关系？Context是函数里面的一个对象，这个对象一般用this，但是用this有时候不是很好用，需要自己写一个对象来用。
*** TODO what is prototype？prototype is a public method exposed to users create extends.
** 2016/12/30
*** 测试确实是质量保证非常重要的环节。由于测试需要对这需求文档测，所以他会去倒逼产品经理补充需求，同时由于测试是研发与上线中间的一道坎，测试可以帮助研发减少线上bug，给研发腾出时间。
*** 其实h5的表单form已经自带了表单验证，并不需要angularjs这种库的支援就可以实现，这就非常牛逼了。
*** TODO 表单有自己的一套数据格式，能够实现自动提交，这就是表单的牛逼之处了。
