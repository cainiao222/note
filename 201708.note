* 2017/08
** 2017/08/01
*** IMPORTANT 关于状态机，状态机到底有什么用呢？
	1. 状态机有什么用呢？状态机在很多情况下是最高效的算法，虽然我们平时碰到的很多问题不用状态机也可以解决，但是如果用状态机来重写，效率将得到极大提升。状态机有个限制，只能从前往后，一个个扫描，不能回溯，不能反向引用，正是这些限制保证了它的极高效率。
	2. 除了效率上的考量外，使用状态机还有个很大的好处就是代码可读性，通过状态机，我们抽出了系统中所有可能的状态并加以编码，这样首先是不容易遗漏了，其次是可以避免非常复杂的条件判断，然后我们还可以将针对每种状态的处理单独抽象出来，提高程序的可读性和可维护性。
*** TODO 最简单的使用状态机的场景也许就是轮询用户状态了。
*** TODO vertical-align
*** 我需要一个记录待办事项的工具，以保证我的核心工作流不被打断，当有空余时间时再来处理这些事项，org-mode的todo list是一个非常好的选择。
*** TIPS 站在比函数更高的层面去思考问题，也就是函数组、功能模块的角度，去整体思考这整个部分的输入输出，你会看到不一样的景象。
*** js的命名提升（hosting）是一个很有用的东西，它最大的作用就是用于在函数定义前使用函数，这一点可以让我们将函数调用放在上面，定义放在下面，这样可读性会比较好。
*** 四大后台：
	1. TV后台，内容展示与鉴权
	2. VRS后台，展示的资源位/资源位组以及和播放相关的
	3. BOSS后台，会员购买相关业务
	4. PASSPORT后台，账号与登陆
** 2017/08/02
*** TIPS 不要将代码写在router的scope里，当发生这样的情况是，要考虑一下我是不是要额外开辟一个文件或是function scope来做这个事。
*** TIPS 提前定义好流程，接口应该只需要提供数据就好了。
** 2017/08/03
*** TIPS 实际上ssh免密码登陆非常简单，A机器想要登陆远程的B机器，只需要使用ssh-copy-id A机公钥文件 username@domain(包含于openssh-clients中，需要提前安装)将A机的公钥添加到B机对应用户的authorized_keys文件中就可以了，需要格外注意的是权限问题，远程机器上.ssh文件夹的所有文件都要是600才能免密登陆，不然会出现虽然提示成功了，但还是无法免密登陆的情况。
*** TIPS 在函数调用处做本地化，写两个函数，不同的场景写不同的函数，避免直接在locale文件中出现代码。
*** TODO 延迟计算是一个非常重要的东西，尽可能延迟参数传入，这样能提高可重用性。
** 2017/08/04
*** TIPS 一个程序，无论多大，应该保证入口的单一，就像c++中的main一样，不要把过多的执行代码放在全局作用域中，这样你才能保证对代码流程的控制力。程序启动后，前期所有加载的文件应该都只是一些定义，用来加载符号表，只有最后一个文件中才是调用的代码，最好就是一个函数调用，不要多。这样，如果想在最开始插入一个流程，会非常简单。程序，不论多大多复杂，本质上还是过程式的，这种情况非常普遍，迟早会碰到。
*** 关于jquery的ajax请求，这是一个非常常用的东西，必须牢牢记住需要传递哪些参数，不然遇到接口问题很容易懵逼。
** 2017/08/07
*** TIPS 实际上关于好的程序结构，有个很好的参照――――MFC，照着MFC的事件绑定与函数命名来写js，写出来的代码可读性与可维护性会非常好。
*** TIPS OOP很有意思，它是先不管三七二十一，先把所有方法复用（也就是继承），然后发现那些方法不合适，就把这些方法重写下，这种方式下，如果继承的基类比较大，就很容易让人看不见逻辑了。
** 2017/08/08
*** TIPS 如何实现区域之间的跳转呢？使用scopeHelper与scope区域管理起来就行。首先使用scopeHelper管理所有scope，然后将每个区块都定义成scope，然后当检测到方向键时首先检查焦点在哪个scope上，并调用相应scope的焦点处理函数，如果scope失焦，就使用scopeHelper找到新的scope，调用本scope的scopeOut与新scope的scopeIn函数，这样就完成了scope间的跳转。
*** TODO tabindex?
** 2017/08/09
*** TODO 重新实现解释器，带上自己的理解。
*** javascript在类型这一概念上是有欠缺的，而且是很大的欠缺，他允许开发人员在使用一个对象的时候修改这个对象，这样就会在调用代码中去定义代码，这样我们就无法提前"观察"到一个对象的结构，阅读代码的成本会很高。
*** 写代码的时候尽量少用循环，而应该用高阶函数代替，为什么呢？因为循环太强大，能够做的事情太多，以致于我们无法一眼看出一个循环到底是干什么的，而且循环允许我们将做几件事的代码混在一起，这是最致命的。其实仔细观察，循环所做的事情无外乎映射，过滤，查找，排序
*** 排序的本质是以新的规则（函数）重新组织元素，已达到将无序的集合组织成为有序的集合的形式，是一种非常有用的高阶函数。
** 2017/08/10
*** TIPS 在专业性的技术问答上面，baidu与chrome差太多，但需要注意的是，chrome的强更多的是在英文搜索领域，所以我们需要首先将问题转化为英文进行搜索，才能得到理想的结果。
*** gulp的私有任务与串行实际上非常简单，并不是需要三方库或是gulp4才能支持，直接原生的就可以，秘诀就在于on('end',...)，如下：
#+BEGIN_SRC javascript
const gulp = require('gulp');
const through2 = require('through2');

gulp.task('default',function (cb) {

     task1().on('end',() => task2().on('end',cb));
});

// 私有任务1
function task1() {
    return  gulp.src('./src/js/aaa.js')
        .pipe(printProcessedFile('task1:',2000))
        .pipe(gulp.dest('dist'));
}

// 私有任务2
function task2() {
    return  gulp.src('./src/js/bbb.js')
        .pipe(printProcessedFile('task2:',1000))
        .pipe(gulp.dest('dist'));
}

// 简单模拟一个异步task
function printProcessedFile(prefix,time) {
    return through2.obj(function (file,enc,cb) {
        setTimeout(function () {
            console.log(`${prefix}${file.path}`);
            cb(null,file);
        },time);
    })
}
#+END_SRC
*** TIPS 关于函数参数的使用。合理的使用函数嵌套，通过闭包来传递参数是非常重要的，这样可以大大减少参数的数量，减少状态量（函数参数实际上也是一个状态量），阅读起代码来会更轻松，如果发现某个内部函数需要被外部多次调用，再将这个函数再提出去也不迟。这实际上是一种参数复用，通过这种方式减少传参。实际上，面向对象之所以能够简化编程，与面向对象的参数复用是有很大关系的。
*** 实际上pull/push不止可以用在git中，我们完全可以将它利用在实际的编程中，使用它们来表达一种数据同步的操作。实际上，数据同步是一种非常常见的需求，所以，这两个函数是非常有用的。除了pull/push以外，还有几种类似的叫法，put/get、save/load、read/write等等，它们都是一种数据同步。
*** 数据同步在编程中广泛存在，它们以各种名字存在于我们的程序中，read/write、save/load、put/get、pull/push等等，我们需要缓存进行计算，而缓存离不开数据同步。
*** TIPS 在webstrom中，最好的结果过滤方法不是file mask（有bug），而是直接打开搜索结果，直接就是按照文件夹排布的，而且还按照代码还是文本做了区分，想过滤不想看的文件夹就变得非常轻松了。
*** TIPS 直接在chrome的控制台中修改html执行的是innerText而不是innerHtml，所以，想在一个html中插入新的标签是不行的。
*** TIPS 模板引擎有个缺陷――――更新困难。整个模板一旦渲染出来后，如果我想更新其中的某个部分，就不得不重新编译整个模板。当然，规避这个缺陷的方法是有的，就是将模板拆细，一个框架模板（这个框架模板最好不要异步获取数据），在上面留下各个子模板的占位元素，当数据变化的时候重建整个子模板，这样就规避了整体重刷的过程。
** 2017/08/11
*** async与await可以将异步函数变成同步函数，但要注意由此引发的性能问题。
*** helm相比于ido最大的优势在于它不仅仅局限于文件查找，它是一个通用的查找框架（它是emacs anything的一个封装），可以解决各种查找问题，包括但不限于文件、命令、buffer等。这其中，最有用的要数查找命令了，此外，它还能解决ido的一些问题，比如在windows下无法切换盘符。是替换ido的利器。
*** TODO 默认的emacs连文件查找都没有，ido提供了文件查找，稍微好了些；helm不仅提供了文件查找，还提供了命令查找，更好了；但还有更好的――――spacemacs，它不止提供了文件查找、命令查找，还提供了快捷键查找，有了spacemacs，才能真正体会到查找这一概念在编辑器中有多么的重要。
** 2017/08/15
*** TIPS 代码复用的方法，除了函数、类以外，还有一种很容易被忽略的方式――――mixin。
*** TIPS 图形界面的方式虽然对初学者友好但是实际上并不利于提升。很多在命令行下很简单的东西比如ssh/vpn/http/ftp等在图形界面上却非常复杂，想要深入理解这些东西最好还是学下linux。
*** TIPS 如何判断浏览器的型号与版本，通过navigator.userAgent就可以看的一清二楚了，为了增强准确性，可以再加点辅助特征来帮助判断：
	1. ie：userAgent包含MSIE以及存在ActiveXObject函数（ie11不适用）
	2. firefox： userAgent包含Firefox以及存在getBoxObjectFor函数
	3. opera: userAgent包含opera以及存在window.opera属性
	4. safari： userAgent包含Safari且不包含Chrome（openDatabase函数chrome也有，不是它特有）
	5. chrome： userAgent包含Chrome，存在MessageEvent但不存在getBoxObjectFor函数
** 2017/08/16
*** 关于ftp与http，两者都能请求文件，在这方面两者大同小异，但ftp有个特性就在于它还能请求文件夹，服务端会返回一个文件夹结构的html,这样用户就直接能看到这个文件夹下的所有文件了，而如果使用http，要实现这一功能就只能自己在后台将文件夹结构组织成一个字符串返回了，这样就麻烦了。
*** css动画的原理就是在一定条件下将一个元素的样式设置成新的样式，默认情况下，这种变化是瞬发的，但通过transition或animation我们可以让这种变化慢慢发生，在初始态与末态设置都可以。需要注意的是，我们可以通过css也可以通过js来指定触发条件，但使用js可以指定更多条件，比如click时。通过transition，我们可以设置补间动画，通过animation，我们可以设置逐帧动画。一般简单的动画，transition就可以了，如果动画比较复杂，使用animation。
*** TODO 在编程中，可组合性是一个极其重要的东西，我们可以利用已经写好的组件作为基础，在它的基础上重新进行封装，以满足我们的业务需求。这个看似简单的概念，实现起来却并不容易，不是所有的东西都支持的。比如：
	1. css动画。我们不能给一个元素同时加上好几个动画或是已已有的动画为基础，产生新的动画。
	2. js。早期的js，只能通过将所有的代码都放到html中的方式来写，一个js不能包含另一个js，这是一个巨大的缺陷，使得模块化无法进行，这也是不具备可组合性的例子。正是因为不具备这个能力，组件化也无法进行。
	3. 再谈到html，很有趣的一件事，html实际上也有面向对象，当一个东西由好几个部分组成的时候，我们就应该将这几个部分包装在一个容器中，这样才能实现整体变换，不要将每一个部分都暴露在外面，这样不便于控制。
*** TIPS 写代码的时候，应该将共有的部分与私有的东西区分开来，这样对外能提供清晰的接口，对内又不损失灵活性。因为共有的部分是给用户看的，是用户友好的，私有的部分是给程序员看的，是实现友好的，便于复用。
** 2017/08/17
*** html的自动布局有时候很好用，但有时候也会造成困扰，比如我们像完全掌控元素的位置，可能就会因为自动布局的问题使得元素的位置被干扰，使得位置控制变得困难。
*** TODO 图片循环滚动？
*** TIPS 如何实现数组循环取头一个元素？实际上很简单，idx = (idx + 1) % arr.length,这样就可以了，原理是一旦达到数组上限，就重新从0开始，这样就实现了循环，这样比每次用if判断要简单高效得多。改变下，如何取头n个元素呢？
*** 乘法的奥义是重复，除法的是分块。
** 2017/08/18
*** TIPS 在git中，如果你不慎将一个临时文件提交到git仓库中了，不是直接在gitignore中将这个文件加进去就好了，还需要在本地将这个文件删除并提交到远程，git会检查出这个删除操作（即使它被ignore了）并将远程文件删除，这样再次生成这个临时文件git就不会管这个文件了。也就是说gitignore的工作原理不是直接忽略某个文件，而是先检查服务器上是否存在这个文件，不存在时才会忽略这个文件，如果存在，依然会检查这个文件。
*** TIPS setTimeout与setInterval是很重要的东西，它是js的时间轴，是实现动画的关键。
*** IMPORTANT 实际上，做动画与做其他的程序是一样的，只不过动画是修改数据，每过一定的时间（一帧）自动渲染，而其他程序是手动渲染。手动渲染一修改数据就要重新渲染，费时费力，纯动画式的自动渲染多数时候是多余的，浪费性能（所以，有些游戏会限制帧率）。如何更有效的渲染呢？答案是按需自动更新，让程序来自动检查数据是否发生了变化，如果发生了变化再渲染，这就是现在主流的思想，正是基于这一思想，才有了数据双向绑定、虚拟dom这些东西。
