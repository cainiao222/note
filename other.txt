看的不是书，是主题，看了之后先思考怎么解决，再在书里面寻求答案。
天地就是一个圆，循环演绎，生生不息。有光就会有影，有成功就会有失败。这就是各种天地的最根本法则。掌握了这一点，创造天地并不难。
你对现在的自己满意吗？
有输入，有输出，外加完整的数据处理能力，这就注意构成一种语言了，另外还有一点非常重要，就是提供完善的IO接口，不仅是文件IO，还有程序间IO，内存IO，操作系统IO等，这样处理起数据来才是有意义的。
一个很真实却又确实存在的事实就是英文跟中文本来就是两种不同的描述世界的方式，它们之间的单词甚至句子本来就不是一一对应的，所以是不能一词或一句对应翻译。要知道，没有翻译这一行之前两种语言都各自用的好好的，所以每读一句英文将之理解成对应的中文本来就是错的，应该建立起每种语言的语感然后用各自的语感来理解文章。
编程语言是建立在基本的规则上的系统，正因为太基本很容易被忽略。只有意识到这些规则了才能打破规则，创造规则。
行为上无法做到绝对自由但思想上是可以做到绝对自由的，但却最难做到绝对自由。有一只看不见的手会限制人的思维使你忽视很多东西，比如阶级意识，常识等。
哪有什么事是绝对不可能发生的呢？
在虚拟世界中，是存在选择题的，非此即彼。但在现实世界，任何问题都绝对不会是选择题，即使是那些一眼看去就是选择题的问题，必然存在指定条件下的第三选项，正因如此，如果足够聪明，你可以永远是赢家，因为对于失败选项，你可以选择第三选项。
服务的特性就是常驻内存，一直监视。几乎所有的设备都有一个服务，如视频，音频，网络等，只有这样才能做到实时响应(推消息)。
分布式计算得核心其实是链表，当某个计算节点忙时可以讲任务发送给下一节点，这样就实现了分布式。链表是一种只需要在每个节点上保存本节点的信息却可以通过此信息跳转到下一节点实现整体遍历的。其实因特网本身就是最大的分布式系统。路由表的本质就是链表。
链表的本质其实就是一个矢量，里面存储着当前节点与下一节点的信息。基于此，网络的本质其实就是矢量。
实际上所谓的分层体系结构就是将一个程序分成几个程序，下层给上层提供接口，上层给下层提供服务，使用几个程序来完成一件事。这样程序会有比较好的可维护性。
权 责 利
学习永远比创造容易，但创造可以更好地支持再创造，学习却不行。这也就是落后者永远缺乏创新的原因。要避免这一缺陷，就需要在思考中学习，不止要关注学习的结果，还要留意知识的演进。只要给予足够的时间，后来者总是能赶上领先者，因为后者站在巨人的肩膀上。
大公司制度，技术先进，规范但无法发挥个人的创造力，这是先进的缺陷。所以团队贵在精而不在多。
如何保证一件事的正常推进，不至于流于空口说白话，永远原地踏步，方法就是以文档渐进的形式到证事情的正常开展。
函数 对象？
七种运算符？
